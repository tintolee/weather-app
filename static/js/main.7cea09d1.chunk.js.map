{"version":3,"sources":["components/weather.jsx","components/form.js","App.js","serviceWorker.js","index.js"],"names":["weather","city","country","temp_celsius","temp_max","temp_min","description","weatherIcon","className","min","max","minmaxTemp","charAt","toUpperCase","slice","error","props","role","Form","onSubmit","getWeather","type","placeholder","name","autoComplete","App","e","a","cityName","target","elements","value","preventDefault","fetch","apiCAll","json","response","console","log","setState","celsius","calCelsius","list","main","temp","get_WeatherIcon","id","state","undefined","icon","thunderStorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","Thunderstorm","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2UAmCeA,MArBf,YAAyF,IAAvEC,EAAsE,EAAtEA,KAAKC,EAAiE,EAAjEA,QAAQC,EAAyD,EAAzDA,aAAaC,EAA4C,EAA5CA,SAASC,EAAmC,EAAnCA,SAASC,EAA0B,EAA1BA,YAAYC,EAAc,EAAdA,YACtE,OACI,yBAAKC,UAAU,wBACZ,yBAAKA,UAAU,cACtB,4BAAKP,EAAL,IAAYC,GACL,wBAAIM,UAAU,QAEV,uBAAGA,UAAS,aAAQD,EAAR,iBAEvB,wBAAIC,UAAU,QAAQL,EAAtB,QAnBJ,SAAoBM,EAAIC,GACpB,GAAIA,GAAOD,EACX,OACI,4BACH,0BAAMD,UAAU,QAAQC,EAAxB,QACD,0BAAMD,UAAU,QAAQE,EAAxB,SAgBQC,CAAWN,EAAYD,GAC/B,wBAAII,UAAU,QAAd,IAAuBF,EAAYM,OAAO,GAAGC,cACrCP,EAAYQ,MAAM,OCSxBC,G,kBAAQ,SAAAC,GACZ,OACE,yBAAKR,UAAU,0BAA0BS,KAAK,SAA9C,6BAMWC,EAzCF,SAAAF,GACX,OACE,yBAAKR,UAAU,mBACb,0BAAMW,SAAUH,EAAMI,YACpB,6BAAMJ,EAAMD,MAAQA,IAAU,IAC9B,yBAAKP,UAAU,OACb,yBAAKA,UAAU,wBACb,2BACEa,KAAK,OACLb,UAAU,eACVc,YAAY,OACZC,KAAK,OACLC,aAAa,SAGjB,yBAAKhB,UAAU,YACb,2BACEa,KAAK,OACLb,UAAU,eACVc,YAAY,UACZC,KAAK,UACLC,aAAa,SAGjB,yBAAKhB,UAAU,uCACb,4BAAQA,UAAU,mBAAlB,oBCyFGiB,E,kDA1Gb,aAAc,IAAD,8BAEX,gBAwDFL,WA1Da,uCA0DD,WAAMM,GAAN,qBAAAC,EAAA,yDACJC,EAAUF,EAAEG,OAAOC,SAAS7B,KAAK8B,MACjC7B,EAAUwB,EAAEG,OAAOC,SAAS5B,QAAQ6B,MAC1CL,EAAEM,kBAEGJ,EALK,iCAMYK,MAAK,mFAA8EL,EAA9E,YAA0F1B,EAA1F,kBApEf,qCA8DF,cAMJgC,EANI,gBAOYA,EAAQC,OAPpB,OAOJC,EAPI,OAQVC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZtC,KAAKmC,EAASnC,KAAKsB,KACnBrB,QAAQkC,EAASnC,KAAKC,QACtBsC,QAAW,EAAKC,WAAWL,EAASM,KAAK,GAAGC,KAAKC,MACjDtC,YAAa8B,EAASM,KAAK,GAAG1C,QAAQ,GAAGM,YACzCF,SAAW,EAAKqC,WAAWL,EAASM,KAAK,GAAGC,KAAKvC,UACjDC,SAAU,EAAKoC,WAAWL,EAASM,KAAK,GAAGC,KAAKtC,YAKpD,EAAKwC,gBAAgB,EAAKtC,YAAa6B,EAASM,KAAK,GAAG1C,QAAQ,GAAG8C,IApBvD,wBAwBZ,EAAKP,SAAS,CACZxB,OAAO,IAzBG,4CA1DC,sDAGX,EAAKgC,MAAM,CACT9C,UAAM+C,EACN9C,aAAQ8C,EACRC,UAAKD,EACLL,UAAKK,EACLR,aAAQQ,EACR5C,SAAS,KACTC,SAAU,KACVC,YAAa,GACbS,OAAM,GAIR,EAAKR,YAAY,CACf2C,aAAa,kBACbC,QAAS,WACTC,KAAM,mBACNC,KAAM,UACNC,WAAW,SACXC,MAAO,SACPC,OAAQ,cAvBC,E,uDA0BDZ,GAET,OADSa,KAAKC,MAAMd,EAAK,U,sCAGXe,EAAOC,GACtB,QAAQ,GACN,KAAKA,GAAW,KAAOA,EAAU,IAC/BC,KAAKtB,SAAS,CAAEU,KAAMU,EAAMG,eAC5B,MACF,KAAKF,GAAW,KAAOA,GAAW,IAChCC,KAAKtB,SAAS,CAAEU,KAAMU,EAAMR,UAC5B,MACF,KAAKS,GAAW,KAAOA,GAAW,IAChCC,KAAKtB,SAAS,CAAEU,KAAMU,EAAMP,OAC5B,MACF,KAAKQ,GAAW,KAAOA,GAAW,IAChCC,KAAKtB,SAAS,CAAEU,KAAMU,EAAMN,OAC5B,MACF,KAAKO,GAAW,KAAOA,GAAW,IAChCC,KAAKtB,SAAS,CAAEU,KAAMU,EAAML,aAC5B,MACF,KAAiB,MAAZM,EACHC,KAAKtB,SAAS,CAAEU,KAAMU,EAAMJ,QAC5B,MACF,KAAKK,GAAW,KAAOA,GAAW,IAChCC,KAAKtB,SAAS,CAAEU,KAAMU,EAAMH,SAC5B,MACF,QACEK,KAAKtB,SAAS,CAAEU,KAAMU,EAAMH,Y,+BAqChC,OACE,yBAAKhD,UAAU,OACb,kBAAC,EAAD,CAAMY,WAAYyC,KAAKzC,WAAYL,MAAO8C,KAAKd,MAAMhC,QACvD,kBAAC,EAAD,CAASd,KAAO4D,KAAKd,MAAM9C,KAAMC,QAAS2D,KAAKd,MAAM7C,QAASC,aAAc0D,KAAKd,MAAMP,QAASpC,SAAUyD,KAAKd,MAAM3C,SAAUC,SAAUwD,KAAKd,MAAM1C,SACpJC,YAAeuD,KAAKd,MAAMzC,YAAaC,YAAasD,KAAKd,MAAME,Y,GAjGnDc,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjE,GACLsB,QAAQtB,MAAMA,EAAMkE,c","file":"static/js/main.7cea09d1.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './weather.css'\r\n\r\nfunction minmaxTemp(min,max){\r\n    if (max && min){\r\n    return(\r\n        <h3>\r\n     <span className='px-4'>{min}&deg;</span>\r\n    <span className='px-4'>{max}&deg;</span>\r\n        </h3>\r\n    )\r\n}}\r\n\r\nfunction weather({city,country,temp_celsius,temp_max,temp_min,description,weatherIcon}) {\r\n    return (\r\n        <div className='container text-light'>\r\n           <div className='cards pt-4'>\r\n    <h1>{city},{country}</h1>\r\n           <h5 className='py-4'>\r\n\r\n               <i className={`wi ${weatherIcon} display-1`}/>\r\n           </h5>\r\n    <h1 className='py-2'>{temp_celsius}&deg;</h1>\r\n           {/** show max and min temp */}\r\n           {minmaxTemp(temp_min  , temp_max)}\r\n    <h4 className='py-3'> {description.charAt(0).toUpperCase() +\r\n            description.slice(1)}</h4>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default weather\r\n","import React from \"react\";\r\nimport \"./form.css\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <div className=\"container h-100\">\r\n      <form onSubmit={props.getWeather}>\r\n        <div>{props.error ? error() : \"\"}</div>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"City\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Country\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 mt-md-0 mt-2 text-md-left \">\r\n            <button className=\"btn btn-warning\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst error = props => {\r\n  return (\r\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n      Please Enter City Name!\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport Weather from './components/weather'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css'\nimport Form from './components/form'\n\nconst API_KEY = '9aecbd939902a90c51faa3db4c915a86'\n\nclass App extends Component {\n  \n  constructor(){\n\n    super()\n    this.state={\n      city: undefined,\n      country:undefined,\n      icon:undefined,\n      main:undefined,\n      celsius:undefined,\n      temp_max:null,\n      temp_min: null,\n      description: \"\" ,\n      error:false\n    }\n    \n\n    this.weatherIcon={\n      thunderStorm:'wi-thunderstorm',\n      Drizzle: 'wi-sleet',\n      Rain: 'wi-storm-showers',\n      Snow: 'wi-snow',\n      Atmosphere:'wi-fog',\n      Clear: \"wi-day\",\n      Clouds: 'wi-day-fog'\n    }\n  }\n   calCelsius(temp){\n     let cel =Math.floor(temp-273.15) \n     return cel\n   }\n   get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  getWeather= async(e)=>{\n    const cityName= e.target.elements.city.value\n    const country = e.target.elements.country.value\n    e.preventDefault()\n\n    if ( cityName) {\n    const apiCAll = await fetch (`https://crossorigin.me/http://api.openweathermap.org/data/2.5/forecast?q=${cityName},${country}&appid=${API_KEY}`)\n    const response =await apiCAll.json()\n    console.log(response);\n    this.setState({\n      city:response.city.name,\n      country:response.city.country,\n      celsius:   this.calCelsius(response.list[0].main.temp),\n      description :response.list[0].weather[0].description,\n      temp_max : this.calCelsius(response.list[0].main.temp_max),\n      temp_min: this.calCelsius(response.list[0].main.temp_min),\n     \n      \n  })\n\n  this.get_WeatherIcon(this.weatherIcon, response.list[0].weather[0].id)\n \n}\nelse {\n  this.setState({\n    error: true\n  });\n}\n};\n  \n\n  render(){\n\n    return(\n      <div className='App'>\n        <Form getWeather={this.getWeather} error={this.state.error}/>\n      <Weather city ={this.state.city} country={this.state.country} temp_celsius={this.state.celsius} temp_max={this.state.temp_max} temp_min={this.state.temp_min}\n      description = {this.state.description} weatherIcon={this.state.icon}\n      /> \n\n     </div >\n    )\n  }\n\n}\n\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}